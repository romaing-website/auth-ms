name: Build and Release

on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build, analyze and release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: 'zulu'

      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Set environment variables
        run: |
          echo "DB_HOST=localhost" >> $GITHUB_ENV
          echo "DB_PORT=5432" >> $GITHUB_ENV
          echo "DB_NAME=postgres" >> $GITHUB_ENV
          echo "DB_USER=postgres" >> $GITHUB_ENV
          echo "DB_PASS=postgres" >> $GITHUB_ENV
          echo "APP_KEY=debugkey" >> $GITHUB_ENV
          echo "APP_PROFILE=dev" >> $GITHUB_ENV
          echo "APP_FRONTEND_URL=*" >> $GITHUB_ENV

      - name: Get next version
        id: version
        run: |
          LATEST_TAG=$(git tag -l "v*" --sort=-version:refname | head -n1)
          
          if [ -z "$LATEST_TAG" ]; then
            NEW_VERSION="1.0.0"
          else
            VERSION=${LATEST_TAG#v}
            IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
            PATCH=$((PATCH + 1))
          
            if [ $PATCH -gt 9 ]; then
              MINOR=$((MINOR + 1))
              PATCH=0
            fi
          
            NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          fi
          
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Update pom.xml version
        run: |
          mvn versions:set -DnewVersion=${{ steps.version.outputs.version }}
          mvn versions:commit

      - name: Build and analyze
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
            -Dsonar.projectKey=auth-ms \
            -Dsonar.projectName='auth-ms'

      - name: Check SonarQube Quality Gate
        run: |
          sleep 15
          STATUS=$(curl -s -u ${{ secrets.SONAR_TOKEN }}: \
            "${{ secrets.SONAR_HOST_URL }}/api/qualitygates/project_status?projectKey=auth-ms" \
            | jq -r '.projectStatus.status')
          
          if [ "$STATUS" != "OK" ]; then
            echo "Quality Gate failed: $STATUS"
            exit 1
          fi

      - name: Build JAR
        run: mvn clean package -DskipTests

      - name: Create Git tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag ${{ steps.version.outputs.tag }}
          git push origin ${{ steps.version.outputs.tag }}

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: Release ${{ steps.version.outputs.version }}
          body: |
            ## Auth MS Release ${{ steps.version.outputs.version }}
            - SonarQube Quality Gate passed
            - Built with Java 21
            - ðŸ—„PostgreSQL tests passed
          files: ./target/auth-ms-${{ steps.version.outputs.version }}.jar